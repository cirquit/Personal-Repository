
==================== FINAL INTERFACE ====================
2016-01-03 16:34:45.520949 UTC

interface adven_50qzlX786zH5MCh4a2QQrZ:Day02 7102
  interface hash: a969dd6e33cc8297ed08fc7be97760c2
  ABI hash: 229235bf4ad2c0ac1fa7c3726833865b
  export-list hash: f10b20f9d7ecc0857b93d079d84c1535
  orphan hash: 44fae044149764f9384b5e66fe9c779a
  flag hash: 1177ed9910be22cb08b17094c1021b20
  sig of: Nothing
  used TH splices: False
  where
exports:
  Day02.input
  Day02.part1
  Day02.part2
  Day02.ribbon
  Day02.surface
module dependencies:
package dependencies: base-4.8.1.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 split-0.2.2@split_E4yadeCDng9EtdbI5MZoDg
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Monoid
                         base-4.8.1.0:Data.Type.Equality base-4.8.1.0:GHC.Generics
import  -/  base-4.8.1.0:Data.Foldable 2e5acb797cfda6b3b7fabd7052abe290
import  -/  base-4.8.1.0:Data.List 2a4f5f92892d432e7113f64cd9dcca53
import  -/  base-4.8.1.0:Data.OldList 21f46c368c20a00483b41333e53a55cb
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.List f31ed8784b3e05f1397195751f7d74ea
import  -/  base-4.8.1.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  base-4.8.1.0:Text.Read 30509137a501bd56d136aca29a7a35a6
import  -/  split-0.2.2@split_E4yadeCDng9EtdbI5MZoDg:Data.List.Split 191d865ea862c301707cccb38cecb628
import  -/  split-0.2.2@split_E4yadeCDng9EtdbI5MZoDg:Data.List.Split.Internals 9a9700f4e3c2bb24917a9d1daa5a114d
538a759572a01008e73303d2a2613755
  $sread :: GHC.Base.String -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ s :: GHC.Base.String ->
                 case Text.Read.readEither
                        @ GHC.Types.Int
                        GHC.Read.$fReadInt
                        s of wild {
                   Data.Either.Left x -> GHC.Err.error @ GHC.Types.Int x
                   Data.Either.Right y -> y }) -}
5d996e6e136583e4d7cbf7d0f447516f
  $wgo :: [[GHC.Types.Char]] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
8f1af10c2c6fdb5f9891391db9dff924
  $wgo1 :: [[GHC.Types.Char]] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
fd10e787f3d0148060d4771ed8c913c2
  $wgo2 :: [GHC.Types.Int] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
166432d1830843ba14891bdb0511ba9a
  $wribbon :: [GHC.Types.Int] -> GHC.Prim.Int#
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ w :: [GHC.Types.Int] ->
                 case w of wild {
                   [] -> case Day02.ribbon1 ret_ty GHC.Prim.Int# of {}
                   : l ds
                   -> case ds of wild1 {
                        [] -> case Day02.ribbon1 ret_ty GHC.Prim.Int# of {}
                        : w1 ds1
                        -> case ds1 of wild2 {
                             [] -> case Day02.ribbon1 ret_ty GHC.Prim.Int# of {}
                             : h ds2
                             -> case ds2 of wild3 {
                                  []
                                  -> case Data.OldList.sortBy
                                            @ GHC.Types.Int
                                            GHC.Classes.compareInt
                                            (GHC.Types.:
                                               @ GHC.Types.Int
                                               l
                                               (GHC.Types.:
                                                  @ GHC.Types.Int
                                                  w1
                                                  (GHC.Types.:
                                                     @ GHC.Types.Int
                                                     h
                                                     (GHC.Types.[] @ GHC.Types.Int)))) of wild4 {
                                       [] -> case GHC.List.init2 ret_ty GHC.Prim.Int# of {}
                                       : x xs
                                       -> case Day02.$wgo2
                                                 (GHC.List.init1 @ GHC.Types.Int x xs)
                                                 0 of ww { DEFAULT ->
                                          case l of wild5 { GHC.Types.I# x1 ->
                                          case w1 of wild6 { GHC.Types.I# y ->
                                          case h of wild7 { GHC.Types.I# y1 ->
                                          GHC.Prim.+#
                                            (GHC.Prim.*# 2 ww)
                                            (GHC.Prim.*# (GHC.Prim.*# x1 y) y1) } } } } }
                                  : ipv ipv1
                                  -> case Day02.ribbon1 ret_ty GHC.Prim.Int# of {} } } } }) -}
1551e04e15b708f0419be2bd74fc788f
  $wsurface :: [GHC.Types.Int] -> GHC.Prim.Int#
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ w :: [GHC.Types.Int] ->
                 case w of wild {
                   [] -> case Day02.surface1 ret_ty GHC.Prim.Int# of {}
                   : l ds
                   -> case ds of wild1 {
                        [] -> case Day02.surface1 ret_ty GHC.Prim.Int# of {}
                        : w1 ds1
                        -> case ds1 of wild2 {
                             [] -> case Day02.surface1 ret_ty GHC.Prim.Int# of {}
                             : h ds2
                             -> case ds2 of wild3 {
                                  []
                                  -> case l of wild4 { GHC.Types.I# y ->
                                     case w1 of wild5 { GHC.Types.I# y1 ->
                                     case h of wild6 { GHC.Types.I# y2 ->
                                     case GHC.List.strictMinimum
                                            @ GHC.Types.Int
                                            GHC.Classes.$fOrdInt
                                            (GHC.Types.:
                                               @ GHC.Types.Int
                                               (GHC.Types.I# (GHC.Prim.*# y y2))
                                               (GHC.Types.:
                                                  @ GHC.Types.Int
                                                  (GHC.Types.I# (GHC.Prim.*# y1 y))
                                                  (GHC.Types.:
                                                     @ GHC.Types.Int
                                                     (GHC.Types.I# (GHC.Prim.*# y1 y2))
                                                     (GHC.Types.[]
                                                        @ GHC.Types.Int)))) of wild7 { GHC.Types.I# y3 ->
                                     GHC.Prim.+#
                                       (GHC.Prim.+#
                                          (GHC.Prim.+#
                                             (GHC.Prim.*# (GHC.Prim.*# 2 y) y1)
                                             (GHC.Prim.*# (GHC.Prim.*# 2 y1) y2))
                                          (GHC.Prim.*# (GHC.Prim.*# 2 y2) y))
                                       y3 } } } }
                                  : ipv ipv1
                                  -> case Day02.surface1 ret_ty GHC.Prim.Int# of {} } } } }) -}
31fadaa4a5db717557fbcb37ee11c131
  input :: [GHC.Types.Char]
54bd2f4f4870f74d9d28f169fedc3cda
  part1 :: GHC.Types.Int
  {- Unfolding: (case Day02.$wgo Day02.part4 0 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
6e4b53232067f6a76f14c35bc7971622
  part2 :: GHC.Types.Int
  {- Unfolding: (case Day02.$wgo1 Day02.part4 0 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
0742e3212ac7e91de8959646e2e19ae0
  part4 :: [GHC.Base.String]
  {- Unfolding: (Data.OldList.lines Day02.input) -}
f96dfb2b8f16fe85df0343cdca1286c2
  ribbon :: [GHC.Types.Int] -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [GHC.Types.Int] ->
                 case Day02.$wribbon w of ww { DEFAULT -> GHC.Types.I# ww }) -}
8d4add519c71cec9d38f8a61b771d2f0
  ribbon1 :: GHC.Types.Int
  {- Strictness: b -}
2b2822cea2973e96f18c5211e80bc515
  surface :: [GHC.Types.Int] -> GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: [GHC.Types.Int] ->
                 case Day02.$wsurface w of ww { DEFAULT -> GHC.Types.I# ww }) -}
940359e888f62eadf9fd9744cdbe7b43
  surface1 :: GHC.Types.Int
  {- Strictness: b -}
"SPEC/Day02 read @ Int" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                    GHC.Types.Int
  Text.Read.read @ GHC.Types.Int $dRead = Day02.$sread
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

