
==================== FINAL INTERFACE ====================
2015-12-17 16:57:40.747936 UTC

interface adven_DdIfP9OJOkiGBtIwpnkiVR:Day03 7102
  interface hash: a38587a5a1653c62a975d1255e01cb62
  ABI hash: 0a7ae8acf245fe74b37c3717a94ab08a
  export-list hash: f0f572bf9c82103cf19814928a088e57
  orphan hash: 73532072a7d0bf8ff60f4ed343b02813
  flag hash: 1177ed9910be22cb08b17094c1021b20
  sig of: Nothing
  used TH splices: False
  where
exports:
  Day03.input
  Day03.move
  Day03.part1
  Day03.part2
  Day03.runRoboSantarun
  Day03.runSantarun
  Day03.Coord
module dependencies:
package dependencies: array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ
                      base-4.8.1.0* containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Exts
                         base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
import  -/  base-4.8.1.0:Data.Foldable 2e5acb797cfda6b3b7fabd7052abe290
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map 8137ae58be1ec45e0e573cabbb314b88
import  -/  containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base f612c5e011acafca0324bd65cbb4b781
cdc3ad77db02cc8691d4588ba0b037c8
  $sfromList :: [(Day03.Coord, a)] -> Data.Map.Base.Map Day03.Coord a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a ds :: [(Day03.Coord, a)] ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ Day03.Coord @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { (,) ipv ipv1 ->
                           Data.Map.Base.Bin
                             @ Day03.Coord
                             @ a
                             1
                             dt
                             x
                             (Data.Map.Base.Tip @ Day03.Coord @ a)
                             (Data.Map.Base.Tip @ Day03.Coord @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of ww { (,) ww1 ww2 ->
                           case ky of ww3 { (,) ww4 ww5 ->
                           case ww1 of wild4 { GHC.Types.I# x# ->
                           case ww4 of wild5 { GHC.Types.I# y# ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# x# y#) of wild6 {
                             GHC.Types.False
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# x# y#) of wild7 {
                                  GHC.Types.False
                                  -> Day03.$sfromList1
                                       @ a
                                       (Data.Map.Base.Bin
                                          @ Day03.Coord
                                          @ a
                                          1
                                          ww
                                          x
                                          (Data.Map.Base.Tip @ Day03.Coord @ a)
                                          (Data.Map.Base.Tip @ Day03.Coord @ a))
                                       wild2
                                  GHC.Types.True
                                  -> case ww2 of wild8 { GHC.Types.I# x1 ->
                                     case ww5 of wild9 { GHC.Types.I# y ->
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.>=# x1 y) of wild10 {
                                       GHC.Types.False
                                       -> Day03.$wpoly_go10
                                            @ a
                                            1
                                            (Data.Map.Base.Bin
                                               @ Day03.Coord
                                               @ a
                                               1
                                               ww
                                               x
                                               (Data.Map.Base.Tip @ Day03.Coord @ a)
                                               (Data.Map.Base.Tip @ Day03.Coord @ a))
                                            wild2
                                       GHC.Types.True
                                       -> Day03.$sfromList1
                                            @ a
                                            (Data.Map.Base.Bin
                                               @ Day03.Coord
                                               @ a
                                               1
                                               ww
                                               x
                                               (Data.Map.Base.Tip @ Day03.Coord @ a)
                                               (Data.Map.Base.Tip @ Day03.Coord @ a))
                                            wild2 } } } }
                             GHC.Types.True
                             -> Day03.$wpoly_go10
                                  @ a
                                  1
                                  (Data.Map.Base.Bin
                                     @ Day03.Coord
                                     @ a
                                     1
                                     ww
                                     x
                                     (Data.Map.Base.Tip @ Day03.Coord @ a)
                                     (Data.Map.Base.Tip @ Day03.Coord @ a))
                                  wild2 } } } } } } } } }) -}
a5caedabf0655275ed5b4b32f4c4d8ef
  $sfromList1 ::
    Data.Map.Base.Map Day03.Coord a1
    -> [(Day03.Coord, a1)] -> Data.Map.Base.Map Day03.Coord a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
d01b84bfa928646d8bf201d15dd3b217
  $w$sgo1 ::
    (Day03.Coord -> a1 -> a1 -> a1)
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> a1
    -> Data.Map.Base.Map Day03.Coord a1
    -> Data.Map.Base.Map Day03.Coord a1
  {- Arity: 5,
     Strictness: <L,1*C1(C1(C1(U)))><L,U(U)><L,U(U)><L,U><S,1*U>,
     Inline: [0] -}
b6b315d9b14861c6ba81490bac908d07
  $w$sgo10 ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> a1
    -> Data.Map.Base.Map Day03.Coord a1
    -> Data.Map.Base.Map Day03.Coord a1
  {- Arity: 4, Strictness: <L,U(U)><L,U(U)><L,U><S,1*U>,
     Inline: [0] -}
f955c2ef83c4fb3113ae1342cedd6060
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map Day03.Coord a
    -> [(Day03.Coord, a)]
    -> Data.Map.Base.Map Day03.Coord a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
15aed625a2b0ee405cafd860243d46e2
  type Coord = (GHC.Types.Int, GHC.Types.Int)
6b821b50fcef2073e0866de4ca60ce48
  input :: [GHC.Types.Char]
3025835e33e637983c5606a8a40335b9
  move :: GHC.Types.Char -> Day03.Coord -> Day03.Coord
  {- Arity: 2, Strictness: <S(S),1*U(1*U)><S,1*U(U(U),U(U))>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ w :: GHC.Types.Char w1 :: Day03.Coord ->
                 case w of ww { GHC.Types.C# ww1 ->
                 case w1 of ww2 { (,) ww3 ww4 ->
                 case ww1 of ds {
                   DEFAULT -> Day03.move1
                   '<'
                   -> (case ww3 of wild { GHC.Types.I# x ->
                       GHC.Types.I# (GHC.Prim.-# x 1) },
                       ww4)
                   '>'
                   -> (case ww3 of wild { GHC.Types.I# x ->
                       GHC.Types.I# (GHC.Prim.+# x 1) },
                       ww4)
                   '^'
                   -> (ww3,
                       case ww4 of wild { GHC.Types.I# x ->
                       GHC.Types.I# (GHC.Prim.+# x 1) })
                   'v'
                   -> (ww3,
                       case ww4 of wild { GHC.Types.I# x ->
                       GHC.Types.I# (GHC.Prim.-# x 1) }) } } }) -}
2aff324533dce3ee37d1352e34880452
  move1 :: Day03.Coord
  {- Strictness: b -}
c6ebd046a1c9ab53b7917f73a26623b9
  part1 :: GHC.Types.Int
  {- Unfolding: (Day03.part5 Day03.part4) -}
0d17824c924517dea931ccfd8cc13b5f
  part10 :: ((GHC.Types.Int, GHC.Types.Int), GHC.Types.Int)
  {- HasNoCafRefs, Unfolding: ((Day03.part7, Day03.part11)) -}
e07ba270f12600b4ef29e66a0ff97d6c
  part11 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1) -}
b63dca1128a5a9a15c44c7309db16fe4
  part12 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: (Day03.part2_go10
                   (GHC.Base.id @ GHC.Types.Int)
                   Day03.part13) -}
50479d7097141e78c929de85b413a7c1
  part13 :: Data.Map.Base.Map Day03.Coord GHC.Types.Int
  {- Unfolding: (Day03.part2_go
                   Day03.part8
                   Day03.part7
                   Day03.part7
                   Day03.input) -}
cca4c99e18925388e94ddf99f5b1c61d
  part1_go ::
    Data.Map.Base.Map Day03.Coord GHC.Types.Int
    -> Day03.Coord
    -> GHC.Base.String
    -> Data.Map.Base.Map Day03.Coord GHC.Types.Int
  {- Arity: 3, Strictness: <S,1*U><L,1*U(U(U),U(U))><S,1*U> -}
3dd92e5d941b751becfdcf54903fa838
  part1_go10 ::
    (GHC.Types.Int -> GHC.Types.Int)
    -> Data.Map.Base.Map (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U> -}
9df3ec5275b643fd422b67cf05f3f860
  part2 :: GHC.Types.Int
  {- Unfolding: (Day03.part12 Day03.part4) -}
272d91ef63685308edab58717e103a09
  part2_go ::
    Data.Map.Base.Map Day03.Coord GHC.Types.Int
    -> Day03.Coord
    -> Day03.Coord
    -> GHC.Base.String
    -> Data.Map.Base.Map Day03.Coord GHC.Types.Int
  {- Arity: 4,
     Strictness: <S,1*U><L,1*U(U(U),U(U))><L,1*U(U(U),U(U))><S,1*U> -}
30907091fc700eee6a51864cf80695e1
  part2_go10 ::
    (GHC.Types.Int -> GHC.Types.Int)
    -> Data.Map.Base.Map (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U> -}
9c6f9cff5d6a46c3052df15aae24f2b4
  part4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
985a05a2b7b43c3a261b9a4304e9fbd9
  part5 :: GHC.Types.Int -> GHC.Types.Int
  {- Unfolding: (Day03.part1_go10
                   (GHC.Base.id @ GHC.Types.Int)
                   Day03.part6) -}
551975de5dc6ca0037e1c099b9abaec9
  part6 :: Data.Map.Base.Map Day03.Coord GHC.Types.Int
  {- Unfolding: (Day03.part1_go
                   Day03.part8
                   Day03.part7
                   Day03.input) -}
82aa06269aa5968441df54077dd7f491
  part7 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Day03.part4, Day03.part4)) -}
3a1ec62fccb6200cdabd095aaa2f9407
  part8 :: Data.Map.Base.Map Day03.Coord GHC.Types.Int
  {- Unfolding: (Day03.$sfromList @ GHC.Types.Int Day03.part9) -}
c52aa4a711d8c3db6bed80a2bbd8bfaf
  part9 :: [(Day03.Coord, GHC.Types.Int)]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (Day03.Coord, GHC.Types.Int)
                   Day03.part10
                   (GHC.Types.[] @ (Day03.Coord, GHC.Types.Int))) -}
fbfbe974cef70a5fa6af13feec8d412f
  runRoboSantarun ::
    GHC.Base.String -> Data.Map.Base.Map Day03.Coord GHC.Types.Int
  {- Arity: 1,
     Unfolding: (Day03.part2_go Day03.part8 Day03.part7 Day03.part7) -}
8e3d48ce83cfc4dda6a24424ef168bf4
  runSantarun ::
    GHC.Base.String -> Data.Map.Base.Map Day03.Coord GHC.Types.Int
  {- Arity: 1, Unfolding: (Day03.part1_go Day03.part8 Day03.part7) -}
"SPEC/Day03 fromList @ Coord _" [ALWAYS] forall @ a
                                                $dOrd :: GHC.Classes.Ord Day03.Coord
  Data.Map.Base.fromList @ (GHC.Types.Int, GHC.Types.Int) @ a $dOrd
  = Day03.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

