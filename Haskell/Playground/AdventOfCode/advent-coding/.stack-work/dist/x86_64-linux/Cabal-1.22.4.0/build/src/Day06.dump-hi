
==================== FINAL INTERFACE ====================
2015-12-18 11:33:48.940005 UTC

interface adven_DdIfP9OJOkiGBtIwpnkiVR:Day06 7102
  interface hash: 3a1313f7f93c9d07672d01e6609b39d5
  ABI hash: 58b11bd2eaeada43d1054a294c665c22
  export-list hash: 9d6fc3025727f869f3a8a0df4cb79893
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 901c599dcffea864a3c918f220a36407
  sig of: Nothing
  used TH splices: False
  where
exports:
  Day06.mapInput
  Day06.mapThrough
  Day06.parse
  Day06.part2
  Day06.turnp1
  Day06.turnp2
  Day06.Coords
  Day06.TurnType{Day06.Off Day06.On Day06.Toggle}
module dependencies:
package dependencies: array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ
                      base-4.8.1.0 ghc-prim-0.4.0.0 integer-gmp-1.0.0.0
                      split-0.2.2@split_E4yadeCDng9EtdbI5MZoDg
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Monoid
                         base-4.8.1.0:Data.Type.Equality base-4.8.1.0:GHC.Exts
                         base-4.8.1.0:GHC.Generics
import  -/  array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ:Data.Array.Base bba8760a49d70dabe8639c03ed9ea60a
import  -/  array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ:Data.Array.IO e0c27541ef499bdbfd3647758dd595ac
import  -/  base-4.8.1.0:Control.Monad dfea142d91349c4861427789d50d5b80
import  -/  base-4.8.1.0:Data.Foldable 2e5acb797cfda6b3b7fabd7052abe290
import  -/  base-4.8.1.0:Data.OldList 21f46c368c20a00483b41333e53a55cb
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.IOArray 1dae1035b3a3a6abd2da9ae89dd944a4
import  -/  base-4.8.1.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.1.0:GHC.Show b8c65ca3124f92a166c9f05120382442
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  base-4.8.1.0:System.IO d541b8bdf18c04de3ab7ea0277c4eba3
import  -/  base-4.8.1.0:Text.Read 30509137a501bd56d136aca29a7a35a6
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  ghc-prim-0.4.0.0:GHC.Types 6b27fb3fdbd0e3f0925a4496c66513bb
import  -/  split-0.2.2@split_E4yadeCDng9EtdbI5MZoDg:Data.List.Split 191d865ea862c301707cccb38cecb628
import  -/  split-0.2.2@split_E4yadeCDng9EtdbI5MZoDg:Data.List.Split.Internals 9a9700f4e3c2bb24917a9d1daa5a114d
ea8bc303fdc77e6ccd3982e262183ad6
  $fShowTurnType :: GHC.Show.Show Day06.TurnType
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Day06.TurnType
                  Day06.$fShowTurnType_$cshowsPrec
                  Day06.$fShowTurnType_$cshow
                  Day06.$fShowTurnType_$cshowList -}
ac11e8a8c2b319595b21dd3e46a2ac50
  $fShowTurnType1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Toggle"#) -}
78c3c5ae2b1a01bfc6c981185de3ab64
  $fShowTurnType2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Off"#) -}
e8ec6adcd8ffa8e00b3f8c0191531043
  $fShowTurnType3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "On"#) -}
ea8bc303fdc77e6ccd3982e262183ad6
  $fShowTurnType_$cshow :: Day06.TurnType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ x :: Day06.TurnType ->
                 case x of wild {
                   Day06.On -> Day06.$fShowTurnType3
                   Day06.Off -> Day06.$fShowTurnType2
                   Day06.Toggle -> Day06.$fShowTurnType1 }) -}
ea8bc303fdc77e6ccd3982e262183ad6
  $fShowTurnType_$cshowList :: [Day06.TurnType] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Day06.TurnType
                   Day06.$w$cshowsPrec) -}
ea8bc303fdc77e6ccd3982e262183ad6
  $fShowTurnType_$cshowsPrec ::
    GHC.Types.Int -> Day06.TurnType -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ w :: GHC.Types.Int w1 :: Day06.TurnType w2 :: GHC.Base.String ->
                 Day06.$w$cshowsPrec w1 w2) -}
ea8bc303fdc77e6ccd3982e262183ad6
  $w$cshowsPrec ::
    Day06.TurnType -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ w :: Day06.TurnType w1 :: GHC.Base.String ->
                 case w of wild {
                   Day06.On -> GHC.Base.++ @ GHC.Types.Char Day06.$fShowTurnType3 w1
                   Day06.Off -> GHC.Base.++ @ GHC.Types.Char Day06.$fShowTurnType2 w1
                   Day06.Toggle
                   -> GHC.Base.++ @ GHC.Types.Char Day06.$fShowTurnType1 w1 }) -}
97add22a6df904346722179b1cfc5ae7
  $wa ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Day06.TurnType
    -> GHC.IOArray.IOArray (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 7,
     Strictness: <L,U><L,1*U(U)><L,U><L,1*U(U)><L,U><L,U(U(U(U),U(U)),U(U(U),U(U)),U,U)><L,U>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Types.Int
                   ww2 :: GHC.Prim.Int#
                   ww3 :: GHC.Types.Int
                   w :: Day06.TurnType
                   w1 :: GHC.IOArray.IOArray
                           (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int
                   w2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># ww ww2) of wild {
                   GHC.Types.False
                   -> case ww1 of wild1 { GHC.Types.I# x ->
                      case ww3 of wild2 { GHC.Types.I# y ->
                      let {
                        lvl16 :: [GHC.Types.Int] = GHC.Enum.eftInt x y
                      } in
                      letrec {
                        a12 :: GHC.Prim.Int#
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                          {- Arity: 2, Strictness: <L,U><L,U> -}
                        = \ x1 :: GHC.Prim.Int#
                            eta :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                          letrec {
                            a13 :: [GHC.Types.Int]
                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                              {- Arity: 2, Strictness: <S,1*U><L,U> -}
                            = \ ds :: [GHC.Types.Int]
                                eta1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                              case ds of wild3 {
                                [] -> (# eta1, GHC.Tuple.() #)
                                : y1 ys
                                -> case y1 of ww4 { GHC.Types.I# ww5 ->
                                   case w1
                                          `cast`
                                        (GHC.IOArray.NTCo:IOArray[0] <(GHC.Types.Int,
                                                                       GHC.Types.Int)>_N <GHC.Types.Int>_N) of ww6 { GHC.Arr.STArray ww7 ww8 ww9 ww10 ->
                                   case ww7 of ww11 { (,) ww12 ww13 ->
                                   case ww8 of ww14 { (,) ww15 ww16 ->
                                   case ww12 of ww17 { GHC.Types.I# ww18 ->
                                   case ww13 of ww19 { GHC.Types.I# ww20 ->
                                   case ww15 of ww21 { GHC.Types.I# ww22 ->
                                   case ww16 of ww23 { GHC.Types.I# ww24 ->
                                   case Day06.$wa1
                                          x1
                                          ww5
                                          w
                                          ww18
                                          ww20
                                          ww22
                                          ww24
                                          ww9
                                          ww10
                                          eta1 of ds1 { (#,#) ipv ipv1 ->
                                   a13 ys ipv } } } } } } } } } }
                          } in
                          case a13 lvl16 eta of ds1 { (#,#) ipv ipv1 ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.==# x1 ww2) of wild3 {
                            GHC.Types.False -> a12 (GHC.Prim.+# x1 1) ipv
                            GHC.Types.True -> (# ipv, GHC.Tuple.() #) } }
                      } in
                      a12 ww w2 } }
                   GHC.Types.True -> (# w2, GHC.Tuple.() #) }) -}
6d055a40de3998d346d8d08eef0cb60b
  $wa1 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Day06.TurnType
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableArray# GHC.Prim.RealWorld GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 10,
     Strictness: <L,U><L,U><S,1*U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Prim.Int#
                   w :: Day06.TurnType
                   ww2 :: GHC.Prim.Int#
                   ww3 :: GHC.Prim.Int#
                   ww4 :: GHC.Prim.Int#
                   ww5 :: GHC.Prim.Int#
                   ww6 :: GHC.Prim.Int#
                   ww7 :: GHC.Prim.MutableArray# GHC.Prim.RealWorld GHC.Types.Int
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of wild {
                   Day06.On
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww2 ww) of wild1 {
                        GHC.Types.False
                        -> case GHC.Arr.hopelessIndexError
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {}
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# ww ww4) of wild2 {
                             GHC.Types.False
                             -> case GHC.Arr.hopelessIndexError
                                ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                of {}
                             GHC.Types.True
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<=# ww3 ww1) of wild3 {
                                  GHC.Types.False
                                  -> case GHC.Arr.hopelessIndexError
                                     ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                     of {}
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# ww1 ww5) of wild7 {
                                       GHC.Types.False
                                       -> case GHC.Arr.hopelessIndexError
                                          ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                          of {}
                                       GHC.Types.True
                                       -> let {
                                            y :: GHC.Prim.Int#
                                            = GHC.Prim.+#
                                                (GHC.Prim.*#
                                                   (GHC.Prim.-# ww ww2)
                                                   (GHC.Prim.+# (GHC.Prim.-# ww5 ww3) 1))
                                                (GHC.Prim.-# ww1 ww3)
                                          } in
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.<=# 0 y) of wild4 {
                                            GHC.Types.False
                                            -> case Day06.mapThrough3 y ww6
                                               ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                               of {}
                                            GHC.Types.True
                                            -> case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.<# y ww6) of wild5 {
                                                 GHC.Types.False
                                                 -> case Day06.mapThrough3 y ww6
                                                    ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                              () #)
                                                    of {}
                                                 GHC.Types.True
                                                 -> case GHC.Prim.readArray#
                                                           @ GHC.Prim.RealWorld
                                                           @ GHC.Types.Int
                                                           ww7
                                                           y
                                                           w1 of ds1 { (#,#) ipv ipv1 ->
                                                    case GHC.Prim.writeArray#
                                                           @ GHC.Prim.RealWorld
                                                           @ GHC.Types.Int
                                                           ww7
                                                           y
                                                           (case ipv1 of wild6 { GHC.Types.I# x ->
                                                            GHC.Types.I# (GHC.Prim.+# x 1) })
                                                           ipv of s2# { DEFAULT ->
                                                    (# s2#, GHC.Tuple.() #) } } } } } } } }
                   Day06.Off
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww2 ww) of wild1 {
                        GHC.Types.False
                        -> case GHC.Arr.hopelessIndexError
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {}
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# ww ww4) of wild2 {
                             GHC.Types.False
                             -> case GHC.Arr.hopelessIndexError
                                ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                of {}
                             GHC.Types.True
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<=# ww3 ww1) of wild3 {
                                  GHC.Types.False
                                  -> case GHC.Arr.hopelessIndexError
                                     ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                     of {}
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# ww1 ww5) of wild7 {
                                       GHC.Types.False
                                       -> case GHC.Arr.hopelessIndexError
                                          ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                          of {}
                                       GHC.Types.True
                                       -> let {
                                            y :: GHC.Prim.Int#
                                            = GHC.Prim.+#
                                                (GHC.Prim.*#
                                                   (GHC.Prim.-# ww ww2)
                                                   (GHC.Prim.+# (GHC.Prim.-# ww5 ww3) 1))
                                                (GHC.Prim.-# ww1 ww3)
                                          } in
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.<=# 0 y) of wild4 {
                                            GHC.Types.False
                                            -> case Day06.mapThrough3 y ww6
                                               ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                               of {}
                                            GHC.Types.True
                                            -> case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.<# y ww6) of wild5 {
                                                 GHC.Types.False
                                                 -> case Day06.mapThrough3 y ww6
                                                    ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                              () #)
                                                    of {}
                                                 GHC.Types.True
                                                 -> case GHC.Prim.readArray#
                                                           @ GHC.Prim.RealWorld
                                                           @ GHC.Types.Int
                                                           ww7
                                                           y
                                                           w1 of ds1 { (#,#) ipv ipv1 ->
                                                    case GHC.Prim.writeArray#
                                                           @ GHC.Prim.RealWorld
                                                           @ GHC.Types.Int
                                                           ww7
                                                           y
                                                           (case ipv1 of wild6 { GHC.Types.I# x ->
                                                            let {
                                                              x1 :: GHC.Prim.Int# = GHC.Prim.-# x 1
                                                            } in
                                                            case GHC.Prim.tagToEnum#
                                                                   @ GHC.Types.Bool
                                                                   (GHC.Prim.<=# x1 0) of wild8 {
                                                              GHC.Types.False -> GHC.Types.I# x1
                                                              GHC.Types.True
                                                              -> Day06.mapThrough2 } })
                                                           ipv of s2# { DEFAULT ->
                                                    (# s2#, GHC.Tuple.() #) } } } } } } } }
                   Day06.Toggle
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww2 ww) of wild1 {
                        GHC.Types.False
                        -> case GHC.Arr.hopelessIndexError
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {}
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# ww ww4) of wild2 {
                             GHC.Types.False
                             -> case GHC.Arr.hopelessIndexError
                                ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                of {}
                             GHC.Types.True
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<=# ww3 ww1) of wild3 {
                                  GHC.Types.False
                                  -> case GHC.Arr.hopelessIndexError
                                     ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                     of {}
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# ww1 ww5) of wild7 {
                                       GHC.Types.False
                                       -> case GHC.Arr.hopelessIndexError
                                          ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                          of {}
                                       GHC.Types.True
                                       -> let {
                                            y :: GHC.Prim.Int#
                                            = GHC.Prim.+#
                                                (GHC.Prim.*#
                                                   (GHC.Prim.-# ww ww2)
                                                   (GHC.Prim.+# (GHC.Prim.-# ww5 ww3) 1))
                                                (GHC.Prim.-# ww1 ww3)
                                          } in
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.<=# 0 y) of wild4 {
                                            GHC.Types.False
                                            -> case Day06.mapThrough3 y ww6
                                               ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                               of {}
                                            GHC.Types.True
                                            -> case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.<# y ww6) of wild5 {
                                                 GHC.Types.False
                                                 -> case Day06.mapThrough3 y ww6
                                                    ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                              () #)
                                                    of {}
                                                 GHC.Types.True
                                                 -> case GHC.Prim.readArray#
                                                           @ GHC.Prim.RealWorld
                                                           @ GHC.Types.Int
                                                           ww7
                                                           y
                                                           w1 of ds1 { (#,#) ipv ipv1 ->
                                                    case GHC.Prim.writeArray#
                                                           @ GHC.Prim.RealWorld
                                                           @ GHC.Types.Int
                                                           ww7
                                                           y
                                                           (case ipv1 of wild6 { GHC.Types.I# x ->
                                                            GHC.Types.I# (GHC.Prim.+# x 2) })
                                                           ipv of s2# { DEFAULT ->
                                                    (# s2#, GHC.Tuple.() #) } } } } } } } } }) -}
f8204818e9d368c60e6fc5b08436532e
  $wa2 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Day06.TurnType
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableArray# GHC.Prim.RealWorld GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 10,
     Strictness: <L,U><L,U><S,1*U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ ww :: GHC.Prim.Int#
                   ww1 :: GHC.Prim.Int#
                   w :: Day06.TurnType
                   ww2 :: GHC.Prim.Int#
                   ww3 :: GHC.Prim.Int#
                   ww4 :: GHC.Prim.Int#
                   ww5 :: GHC.Prim.Int#
                   ww6 :: GHC.Prim.Int#
                   ww7 :: GHC.Prim.MutableArray# GHC.Prim.RealWorld GHC.Types.Int
                   w1 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of wild {
                   Day06.On
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww2 ww) of wild1 {
                        GHC.Types.False
                        -> case GHC.Arr.hopelessIndexError
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {}
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# ww ww4) of wild2 {
                             GHC.Types.False
                             -> case GHC.Arr.hopelessIndexError
                                ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                of {}
                             GHC.Types.True
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<=# ww3 ww1) of wild3 {
                                  GHC.Types.False
                                  -> case GHC.Arr.hopelessIndexError
                                     ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                     of {}
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# ww1 ww5) of wild7 {
                                       GHC.Types.False
                                       -> case GHC.Arr.hopelessIndexError
                                          ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                          of {}
                                       GHC.Types.True
                                       -> let {
                                            y :: GHC.Prim.Int#
                                            = GHC.Prim.+#
                                                (GHC.Prim.*#
                                                   (GHC.Prim.-# ww ww2)
                                                   (GHC.Prim.+# (GHC.Prim.-# ww5 ww3) 1))
                                                (GHC.Prim.-# ww1 ww3)
                                          } in
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.<=# 0 y) of wild4 {
                                            GHC.Types.False
                                            -> case Day06.mapThrough3 y ww6
                                               ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                               of {}
                                            GHC.Types.True
                                            -> case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.<# y ww6) of wild5 {
                                                 GHC.Types.False
                                                 -> case Day06.mapThrough3 y ww6
                                                    ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                              () #)
                                                    of {}
                                                 GHC.Types.True
                                                 -> case GHC.Prim.readArray#
                                                           @ GHC.Prim.RealWorld
                                                           @ GHC.Types.Int
                                                           ww7
                                                           y
                                                           w1 of ds1 { (#,#) ipv ipv1 ->
                                                    case GHC.Prim.writeArray#
                                                           @ GHC.Prim.RealWorld
                                                           @ GHC.Types.Int
                                                           ww7
                                                           y
                                                           (case ipv1 of wild6 { GHC.Types.I# x ->
                                                            GHC.Types.I# (GHC.Prim.+# x 1) })
                                                           ipv of s2# { DEFAULT ->
                                                    (# s2#, GHC.Tuple.() #) } } } } } } } }
                   Day06.Off
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww2 ww) of wild1 {
                        GHC.Types.False
                        -> case GHC.Arr.hopelessIndexError
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {}
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# ww ww4) of wild2 {
                             GHC.Types.False
                             -> case GHC.Arr.hopelessIndexError
                                ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                of {}
                             GHC.Types.True
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<=# ww3 ww1) of wild3 {
                                  GHC.Types.False
                                  -> case GHC.Arr.hopelessIndexError
                                     ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                     of {}
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# ww1 ww5) of wild7 {
                                       GHC.Types.False
                                       -> case GHC.Arr.hopelessIndexError
                                          ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                          of {}
                                       GHC.Types.True
                                       -> let {
                                            y :: GHC.Prim.Int#
                                            = GHC.Prim.+#
                                                (GHC.Prim.*#
                                                   (GHC.Prim.-# ww ww2)
                                                   (GHC.Prim.+# (GHC.Prim.-# ww5 ww3) 1))
                                                (GHC.Prim.-# ww1 ww3)
                                          } in
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.<=# 0 y) of wild4 {
                                            GHC.Types.False
                                            -> case Day06.mapThrough3 y ww6
                                               ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                               of {}
                                            GHC.Types.True
                                            -> case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.<# y ww6) of wild5 {
                                                 GHC.Types.False
                                                 -> case Day06.mapThrough3 y ww6
                                                    ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                              () #)
                                                    of {}
                                                 GHC.Types.True
                                                 -> case GHC.Prim.readArray#
                                                           @ GHC.Prim.RealWorld
                                                           @ GHC.Types.Int
                                                           ww7
                                                           y
                                                           w1 of ds1 { (#,#) ipv ipv1 ->
                                                    case GHC.Prim.writeArray#
                                                           @ GHC.Prim.RealWorld
                                                           @ GHC.Types.Int
                                                           ww7
                                                           y
                                                           (case ipv1 of wild6 { GHC.Types.I# x ->
                                                            let {
                                                              x1 :: GHC.Prim.Int# = GHC.Prim.-# x 1
                                                            } in
                                                            case GHC.Prim.tagToEnum#
                                                                   @ GHC.Types.Bool
                                                                   (GHC.Prim.<=# x1 0) of wild8 {
                                                              GHC.Types.False -> GHC.Types.I# x1
                                                              GHC.Types.True
                                                              -> Day06.mapThrough2 } })
                                                           ipv of s2# { DEFAULT ->
                                                    (# s2#, GHC.Tuple.() #) } } } } } } } }
                   Day06.Toggle
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww2 ww) of wild1 {
                        GHC.Types.False
                        -> case GHC.Arr.hopelessIndexError
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {}
                        GHC.Types.True
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<=# ww ww4) of wild2 {
                             GHC.Types.False
                             -> case GHC.Arr.hopelessIndexError
                                ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                of {}
                             GHC.Types.True
                             -> case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.<=# ww3 ww1) of wild3 {
                                  GHC.Types.False
                                  -> case GHC.Arr.hopelessIndexError
                                     ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                     of {}
                                  GHC.Types.True
                                  -> case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<=# ww1 ww5) of wild7 {
                                       GHC.Types.False
                                       -> case GHC.Arr.hopelessIndexError
                                          ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                          of {}
                                       GHC.Types.True
                                       -> let {
                                            y :: GHC.Prim.Int#
                                            = GHC.Prim.+#
                                                (GHC.Prim.*#
                                                   (GHC.Prim.-# ww ww2)
                                                   (GHC.Prim.+# (GHC.Prim.-# ww5 ww3) 1))
                                                (GHC.Prim.-# ww1 ww3)
                                          } in
                                          case GHC.Prim.tagToEnum#
                                                 @ GHC.Types.Bool
                                                 (GHC.Prim.<=# 0 y) of wild4 {
                                            GHC.Types.False
                                            -> case Day06.mapThrough3 y ww6
                                               ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                               of {}
                                            GHC.Types.True
                                            -> case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.<# y ww6) of wild5 {
                                                 GHC.Types.False
                                                 -> case Day06.mapThrough3 y ww6
                                                    ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                              () #)
                                                    of {}
                                                 GHC.Types.True
                                                 -> case GHC.Prim.readArray#
                                                           @ GHC.Prim.RealWorld
                                                           @ GHC.Types.Int
                                                           ww7
                                                           y
                                                           w1 of ds1 { (#,#) ipv ipv1 ->
                                                    case GHC.Prim.writeArray#
                                                           @ GHC.Prim.RealWorld
                                                           @ GHC.Types.Int
                                                           ww7
                                                           y
                                                           (case ipv1 of wild6 { GHC.Types.I# x ->
                                                            GHC.Types.I# (GHC.Prim.+# x 2) })
                                                           ipv of s2# { DEFAULT ->
                                                    (# s2#, GHC.Tuple.() #) } } } } } } } } }) -}
fa6d616641a22b2253d0162526d7b503
  $wgo :: [GHC.Types.Int] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>, Inline: [0] -}
8079cd7d74cc499b91660da5e7dcd0f8
  $wparse ::
    GHC.Base.String -> (# Day06.Coords, Day06.Coords, Day06.TurnType #)
  {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
22a83015141c1e39de7f3ee850948b37
  type Coords = (GHC.Types.Int, GHC.Types.Int)
ea8bc303fdc77e6ccd3982e262183ad6
  data TurnType = On | Off | Toggle
    Promotable
5aec25a67d866c380949e1234b45b83d
  mapInput ::
    [GHC.Base.String]
    -> GHC.IOArray.IOArray (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 3,
     Strictness: <S,1*U><L,U(U(U(U),U(U)),U(U(U),U(U)),U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Day06.mapInput1
                  `cast`
                (<[GHC.Base.String]>_R
                 ->_R <GHC.IOArray.IOArray
                         (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
e51ec3d2360bd1f0dc7be246ac7b0fe7
  mapInput1 ::
    [GHC.Base.String]
    -> GHC.IOArray.IOArray (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <S,1*U><L,U(U(U(U),U(U)),U(U(U),U(U)),U,U)><L,U> -}
6113ab8d460d3de50e29862e6f5deb0d
  mapThrough ::
    Day06.Coords
    -> Day06.Coords
    -> Day06.TurnType
    -> GHC.IOArray.IOArray (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <S(SL),1*U(1*U(U),1*U(U))><S(SL),1*U(1*U(U),1*U(U))><L,U><L,U(U(U(U),U(U)),U(U(U),U(U)),U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Day06.mapThrough1
                  `cast`
                (<(GHC.Types.Int, GHC.Types.Int)>_R
                 ->_R <(GHC.Types.Int, GHC.Types.Int)>_R
                 ->_R <Day06.TurnType>_R
                 ->_R <GHC.IOArray.IOArray
                         (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
268c0f0c42c6474684cde68bb6f5ae66
  mapThrough1 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Day06.TurnType
    -> GHC.IOArray.IOArray (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <S(SL),1*U(1*U(U),1*U(U))><S(SL),1*U(1*U(U),1*U(U))><L,U><L,U(U(U(U),U(U)),U(U(U),U(U)),U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (5, True, False)
                (\ w :: (GHC.Types.Int, GHC.Types.Int)
                   w1 :: (GHC.Types.Int, GHC.Types.Int)
                   w2 :: Day06.TurnType
                   w3 :: GHC.IOArray.IOArray
                           (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int
                   w4 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { (,) ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 Day06.$wa ww4 ww2 ww9 ww7 w2 w3 w4 } } } }) -}
b7d79c21d0fb424d115dad81607e1950
  mapThrough2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0) -}
06153b188f27298e49b7055936832f9e
  mapThrough3 :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Types.Int
  {- Arity: 2, Strictness: <L,U><L,U>b -}
b6ffefc71252804588419906bdf9aef0
  parse ::
    GHC.Base.String -> (Day06.Coords, Day06.Coords, Day06.TurnType)
  {- Arity: 1, Strictness: <S,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Base.String ->
                 case Day06.$wparse w of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
1ce5d7695f86f19ac3746bb4f240d0fb
  part1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        Day06.part7
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.newArray#
                        @ GHC.Types.Int
                        @ GHC.Prim.RealWorld
                        1000000
                        Day06.mapThrough2
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case Day06.mapInput1
                        (Data.OldList.lines ipv3)
                        (GHC.Arr.STArray
                           @ GHC.Prim.RealWorld
                           @ (GHC.Types.Int, GHC.Types.Int)
                           @ GHC.Types.Int
                           Day06.part6
                           Day06.part4
                           1000000
                           ipv5)
                          `cast`
                        (Sym (GHC.IOArray.NTCo:IOArray[0]) <(GHC.Types.Int,
                                                             GHC.Types.Int)>_N <GHC.Types.Int>_N)
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 letrec {
                   go :: GHC.Prim.Int# -> [GHC.Types.IO GHC.Types.Int]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ x :: GHC.Prim.Int# ->
                     GHC.Types.:
                       @ (GHC.Types.IO GHC.Types.Int)
                       (\ eta2 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                        GHC.Prim.readArray#
                          @ GHC.Prim.RealWorld
                          @ GHC.Types.Int
                          ipv5
                          x
                          eta2)
                         `cast`
                       (Sym (GHC.Types.NTCo:IO[0] <GHC.Types.Int>_R))
                       (case x of wild {
                          DEFAULT -> go (GHC.Prim.+# wild 1)
                          999999 -> GHC.Types.[] @ (GHC.Types.IO GHC.Types.Int) })
                 } in
                 case Day06.part3 (go 0) ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (case Day06.$wgo ipv9 0 of ww { DEFAULT ->
                    case GHC.Show.$wshowSignedInt
                           0
                           ww
                           (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                    GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                   GHC.Types.True
                   ipv8 } } } } }) -}
f1ff8e2eef8ab49bd05b1c188868b093
  part2 :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Day06.part1 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
11915e009466a631b05329b95c684d58
  part3 ::
    [GHC.Types.IO GHC.Types.Int]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Types.Int] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
3495ced733280ad02aee056279fbfa6c
  part4 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Day06.part5, Day06.part5)) -}
83de1a3cb172b7cee3dc7c1186d47218
  part5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 999) -}
f2eab09b43c2cf0e6e580a128fc8cafb
  part6 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Day06.mapThrough2, Day06.mapThrough2)) -}
2e95a6ed997674d964599ea30f353367
  part7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "lib/day06-input.txt"#) -}
0fe1d6d70b139bf2b2e0ef6aefba969c
  turnp1 ::
    Day06.Coords
    -> Day06.TurnType
    -> GHC.IOArray.IOArray (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <S(SS),1*U(1*U(U),1*U(U))><S,1*U><S(S(SS)S(SS)LL),1*U(U(1*U(U),1*U(U)),U(1*U(U),1*U(U)),U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Day06.turnp4
                  `cast`
                (<Day06.Coords>_R
                 ->_R <Day06.TurnType>_R
                 ->_R <GHC.IOArray.IOArray
                         (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
8296465fcd0c9c00ed1a2e59ae1186ba
  turnp2 ::
    Day06.Coords
    -> Day06.TurnType
    -> GHC.IOArray.IOArray (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int
    -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <S(SS),1*U(1*U(U),1*U(U))><S,1*U><S(S(SS)S(SS)LL),1*U(U(1*U(U),1*U(U)),U(1*U(U),1*U(U)),U,U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Day06.turnp5
                  `cast`
                (<Day06.Coords>_R
                 ->_R <Day06.TurnType>_R
                 ->_R <GHC.IOArray.IOArray
                         (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int>_R
                 ->_R Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
489a714594a96df2b2203c4692b04da8
  turnp4 ::
    Day06.Coords
    -> Day06.TurnType
    -> GHC.IOArray.IOArray (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <S(SS),1*U(1*U(U),1*U(U))><S,1*U><S(S(SS)S(SS)LL),1*U(U(1*U(U),1*U(U)),U(1*U(U),1*U(U)),U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Day06.Coords
                   w1 :: Day06.TurnType
                   w2 :: GHC.IOArray.IOArray
                           (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case ww2 of ww5 { GHC.Types.I# ww6 ->
                 case w2
                        `cast`
                      (GHC.IOArray.NTCo:IOArray[0] <(GHC.Types.Int,
                                                     GHC.Types.Int)>_N <GHC.Types.Int>_N) of ww7 { GHC.Arr.STArray ww8 ww9 ww10 ww11 ->
                 case ww8 of ww12 { (,) ww13 ww14 ->
                 case ww13 of ww15 { GHC.Types.I# ww16 ->
                 case ww14 of ww17 { GHC.Types.I# ww18 ->
                 case ww9 of ww19 { (,) ww20 ww21 ->
                 case ww20 of ww22 { GHC.Types.I# ww23 ->
                 case ww21 of ww24 { GHC.Types.I# ww25 ->
                 Day06.$wa2
                   ww4
                   ww6
                   w1
                   ww16
                   ww18
                   ww23
                   ww25
                   ww10
                   ww11
                   w3 } } } } } } } } } }) -}
23c287502f5b2b16c7814ccfbc788074
  turnp5 ::
    Day06.Coords
    -> Day06.TurnType
    -> GHC.IOArray.IOArray (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <S(SS),1*U(1*U(U),1*U(U))><S,1*U><S(S(SS)S(SS)LL),1*U(U(1*U(U),1*U(U)),U(1*U(U),1*U(U)),U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, False)
                (\ w :: Day06.Coords
                   w1 :: Day06.TurnType
                   w2 :: GHC.IOArray.IOArray
                           (GHC.Types.Int, GHC.Types.Int) GHC.Types.Int
                   w3 :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case ww2 of ww5 { GHC.Types.I# ww6 ->
                 case w2
                        `cast`
                      (GHC.IOArray.NTCo:IOArray[0] <(GHC.Types.Int,
                                                     GHC.Types.Int)>_N <GHC.Types.Int>_N) of ww7 { GHC.Arr.STArray ww8 ww9 ww10 ww11 ->
                 case ww8 of ww12 { (,) ww13 ww14 ->
                 case ww13 of ww15 { GHC.Types.I# ww16 ->
                 case ww14 of ww17 { GHC.Types.I# ww18 ->
                 case ww9 of ww19 { (,) ww20 ww21 ->
                 case ww20 of ww22 { GHC.Types.I# ww23 ->
                 case ww21 of ww24 { GHC.Types.I# ww25 ->
                 Day06.$wa1
                   ww4
                   ww6
                   w1
                   ww16
                   ww18
                   ww23
                   ww25
                   ww10
                   ww11
                   w3 } } } } } } } } } }) -}
instance GHC.Show.Show [Day06.TurnType] = Day06.$fShowTurnType
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

