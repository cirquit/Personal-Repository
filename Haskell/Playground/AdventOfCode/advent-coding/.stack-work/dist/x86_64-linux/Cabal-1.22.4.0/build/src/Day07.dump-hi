
==================== FINAL INTERFACE ====================
2015-12-18 19:14:57.489687 UTC

interface adven_DdIfP9OJOkiGBtIwpnkiVR:Day07 7102
  interface hash: 3e5fe93be8f3f96d19846438d386d1e7
  ABI hash: 1a3773e88be37feef2d5a242ed4a6c1e
  export-list hash: b32c4ce6220d6a87150b3610fbcdf47a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: fa9503a4b03c265efc8b5152b175dd63
  sig of: Nothing
  used TH splices: False
  where
exports:
  Day07.fib
  Day07.getValue
  Day07.parse
  Day07.parseToMap
  Day07.part1
  Day07.Circuit{Day07.AND Day07.I Day07.LSHIFT Day07.NOT Day07.OR Day07.RSHIFT Day07.Var}
module dependencies:
package dependencies: array-0.5.1.0@array_E0sTtauuKsGDLZoT7lTbgZ
                      base-4.8.1.0 containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN
                      deepseq-1.4.1.1@deeps_LbCWUlehDDeLxurARKDH5o ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.1.0:GHC.Base base-4.8.1.0:GHC.Float
family instance modules: base-4.8.1.0:Control.Applicative
                         base-4.8.1.0:Data.Either base-4.8.1.0:Data.Functor.Identity
                         base-4.8.1.0:Data.Monoid base-4.8.1.0:Data.Type.Equality
                         base-4.8.1.0:Data.Void base-4.8.1.0:GHC.Exts
                         base-4.8.1.0:GHC.Generics
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base
                         containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Set.Base
import  -/  base-4.8.1.0:Data.Bits 5341167fdd5958c2b3f0dac8924f1efd
import  -/  base-4.8.1.0:Data.Foldable 2e5acb797cfda6b3b7fabd7052abe290
import  -/  base-4.8.1.0:Data.OldList 21f46c368c20a00483b41333e53a55cb
import  -/  base-4.8.1.0:Debug.Trace 7cf679861c4b1d69175105437aae1212
import  -/  base-4.8.1.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.1.0:GHC.Num 9f42750c866f5832ca565146bd660c60
import  -/  base-4.8.1.0:GHC.Show b8c65ca3124f92a166c9f05120382442
import  -/  base-4.8.1.0:Prelude 518f762991bc287d78f21a73c974da1f
import  -/  base-4.8.1.0:System.IO d541b8bdf18c04de3ab7ea0277c4eba3
import  -/  base-4.8.1.0:Text.Read 30509137a501bd56d136aca29a7a35a6
import  -/  containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map 8137ae58be1ec45e0e573cabbb314b88
import  -/  containers-0.5.6.2@conta_LKCPrTJwOTOLk4OU37YmeN:Data.Map.Base f612c5e011acafca0324bd65cbb4b781
04d55cce662ecf3490a9585a2682d6e1
  $fShowCircuit :: GHC.Show.Show Day07.Circuit
  DFunId[0]
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Day07.Circuit
                  Day07.$fShowCircuit_$cshowsPrec
                  Day07.$fShowCircuit_$cshow
                  Day07.$fShowCircuit_$cshowList -}
04d55cce662ecf3490a9585a2682d6e1
  $fShowCircuit1 ::
    Day07.Circuit -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Unfolding: (\ x :: Day07.Circuit s :: GHC.Base.String[OneShot] ->
                 GHC.Base.++ @ GHC.Types.Char (Day07.$fShowCircuit_$cshow x) s) -}
04d55cce662ecf3490a9585a2682d6e1
  $fShowCircuit_$cshow :: Day07.Circuit -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
04d55cce662ecf3490a9585a2682d6e1
  $fShowCircuit_$cshowList :: [Day07.Circuit] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ ls :: [Day07.Circuit] s :: GHC.Base.String ->
                 GHC.Show.showList__ @ Day07.Circuit Day07.$fShowCircuit1 ls s) -}
04d55cce662ecf3490a9585a2682d6e1
  $fShowCircuit_$cshowsPrec ::
    GHC.Types.Int -> Day07.Circuit -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ ds :: GHC.Types.Int x :: Day07.Circuit s :: GHC.Base.String ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b c :: GHC.Types.Char -> b -> b[OneShot] n :: b[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (Day07.$fShowCircuit_$cshow x))
                   s) -}
1d29dc59fbb22e2b8e077abe3872eb9f
  $sinsert_$sgo10 ::
    GHC.Base.String
    -> a1
    -> Data.Map.Base.Map GHC.Base.String a1
    -> Data.Map.Base.Map GHC.Base.String a1
  {- Arity: 3, Strictness: <S,1*U><L,U><S,1*U> -}
76c51019adaa5698214ab78622b61bb9
  $slookup1 ::
    GHC.Base.String
    -> Data.Map.Base.Map GHC.Base.String a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
e4dae4d28758d7e45870d0fbd5613d5e
  $wfib :: GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
04d55cce662ecf3490a9585a2682d6e1
  data Circuit
    = I GHC.Types.Int
    | Var GHC.Base.String
    | NOT Day07.Circuit
    | AND Day07.Circuit Day07.Circuit
    | OR Day07.Circuit Day07.Circuit
    | LSHIFT Day07.Circuit GHC.Types.Int
    | RSHIFT Day07.Circuit GHC.Types.Int
65078200c0a62f42cc3af0ebcc67e11c
  fib :: GHC.Types.Int -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: GHC.Types.Int ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case Day07.$wfib ww1 of ww2 { DEFAULT -> GHC.Types.I# ww2 } }) -}
51334151dd6ca5220c15b2997dd2381f
  getValue ::
    Day07.Circuit
    -> Data.Map.Base.Map GHC.Base.String Day07.Circuit -> GHC.Types.Int
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ ds :: Day07.Circuit
                   m :: Data.Map.Base.Map GHC.Base.String Day07.Circuit ->
                 case ds of wild {
                   DEFAULT -> Day07.getValue2
                   Day07.I i -> i
                   Day07.Var str
                   -> case Day07.$slookup1 @ Day07.Circuit str m of wild1 {
                        GHC.Base.Nothing -> Day07.getValue1 str
                        GHC.Base.Just c -> Day07.parse c m } }) -}
9256cb92bcda10f544386c640e50fda4
  getValue1 :: GHC.Base.String -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>b -}
cc2ac3100943f5c3dabf643fb7f447f0
  getValue2 :: GHC.Types.Int
  {- Strictness: b -}
915947f4030a50e3f182caa45b92010b
  parse ::
    Day07.Circuit
    -> Data.Map.Base.Map GHC.Base.String Day07.Circuit -> GHC.Types.Int
  {- Arity: 2, Strictness: <S,1*U><L,U> -}
a7377897a768dab74e8d5999c1b8eb5a
  parseToMap ::
    GHC.Base.String -> Data.Map.Base.Map GHC.Base.String Day07.Circuit
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ x :: GHC.Base.String ->
                 Day07.parseToMap_go
                   (Data.OldList.lines x)
                   (Data.Map.Base.Tip @ GHC.Base.String @ Day07.Circuit)) -}
0e5d250e8380644523beaa44a6674c69
  parseToMap_go ::
    [[GHC.Types.Char]]
    -> Data.Map.Base.Map GHC.Base.String Day07.Circuit
    -> Data.Map.Base.Map GHC.Base.String Day07.Circuit
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
c04c5c58dc8da1fa7bf6e257bb05261c
  part1 :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Day07.part2 `cast` (Sym (GHC.Types.NTCo:IO[0] <()>_R)) -}
f66986abc103ae1c14698644ebdcbcb1
  part2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Prim.State# GHC.Prim.RealWorld[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        Day07.part6
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (let {
                      m :: Data.Map.Base.Map GHC.Base.String Day07.Circuit
                      = Day07.parseToMap ipv3
                    } in
                    case Day07.$slookup1 @ Day07.Circuit Day07.part4 m of wild {
                      GHC.Base.Nothing
                      -> case GHC.Err.error @ GHC.Types.Int Day07.part3
                         ret_ty GHC.Base.String
                         of {}
                      GHC.Base.Just c
                      -> case Day07.parse c m of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt
                                0
                                ww3
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } } })
                   GHC.Types.True
                   ipv2 } }) -}
9943288f5fd361e4d4d793e0b27a0a91
  part3 :: [GHC.Types.Char]
  {- Unfolding: (Day07.part5
                   @ [GHC.Types.Char]
                   (GHC.Types.: @ GHC.Types.Char)
                   Day07.part4) -}
69a2b7c9d15e4d35cd4c43875b8af264
  part4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "d"#) -}
78ff81d5d23f80a763cbec0fcb78f90d
  part5 :: (GHC.Types.Char -> b -> b) -> b -> b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(C1(U))><L,U>,
     Unfolding: (\ @ b
                   c :: GHC.Types.Char -> b -> b[OneShot]
                   n :: b[OneShot] ->
                 GHC.CString.unpackFoldrCString# @ b "couldn't find var "# c n) -}
b0c003798cf75e48b24b5f5db5d8f06e
  part6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "lib/day07-test.txt"#) -}
instance GHC.Show.Show [Day07.Circuit] = Day07.$fShowCircuit
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

