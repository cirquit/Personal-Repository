/*
  Source code is in UTF-8 encoding. The following symbols may appear, among others:
  α β γ δ ε ζ η θ ι κ λ μ ν ξ ο π ρ ς σ τ υ φ χ ψ ω « • ¦ »  ﬁ ﬂ ƒ
  If you can't read this, you're out of luck.
  This code was generated with the frege compiler version 3.23.246-g2204c5b from
  bin_copy/fregepkg/FregeProducer.fr Do not edit this file!
  Instead, edit the source file and recompile.
*/


package fregepkg;

import frege.Prelude;
import frege.control.Category;
import frege.control.Semigroupoid;
import frege.java.IO;
import frege.java.Lang;
import frege.java.Util;
import frege.java.util.Regex;
import frege.prelude.Maybe;
import frege.prelude.PreludeArrays;
import frege.prelude.PreludeBase;
import frege.prelude.PreludeIO;
import frege.prelude.PreludeList;
import frege.prelude.PreludeMonad;
import frege.prelude.PreludeText;

@SuppressWarnings("unused")
@frege.runtime.Meta.FregePackage(
  source="bin_copy/fregepkg/FregeProducer.fr", time=1437912437394L, ops={},
  imps={
    "frege.Prelude", "frege.prelude.PreludeArrays", "frege.prelude.PreludeBase",
    "frege.prelude.PreludeIO", "frege.prelude.PreludeList", "frege.prelude.PreludeMonad",
    "frege.prelude.PreludeText", "frege.java.util.Regex"
  },
  nmss={
    "Prelude", "PreludeArrays", "PreludeBase", "PreludeIO", "PreludeList", "PreludeMonad",
    "PreludeText", "Regexp"
  },
  symas={}, symcs={}, symis={}, symts={},
  symvs={
    @frege.runtime.Meta.SymV(
      offset=179, name=@frege.runtime.Meta.QName(pack="fregepkg.FregeProducer", base="testio"),
      stri="s", sig=0, depth=0, rkind=49
    ),
    @frege.runtime.Meta.SymV(
      offset=215, name=@frege.runtime.Meta.QName(pack="fregepkg.FregeProducer", base="main"),
      stri="s(u)", sig=2, depth=1, rkind=49
    ),
    @frege.runtime.Meta.SymV(
      offset=97, name=@frege.runtime.Meta.QName(pack="fregepkg.FregeProducer", base="getElem"),
      stri="s(ss)", sig=5, depth=2, rkind=57
    ),
    @frege.runtime.Meta.SymV(
      offset=75, name=@frege.runtime.Meta.QName(pack="fregepkg.FregeProducer", base="evens1"),
      stri="s", sig=3, depth=0, rkind=49
    ),
    @frege.runtime.Meta.SymV(
      offset=39, name=@frege.runtime.Meta.QName(pack="fregepkg.FregeProducer", base="evens"),
      stri="u", sig=4, depth=0, rkind=36
    )
  },
  symls={},
  taus={
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="ST")}
    ),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={
        @frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="RealWorld")
      }
    ),
    @frege.runtime.Meta.Tau(kind=0, suba=0, subb=1),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="()")}
    ),
    @frege.runtime.Meta.Tau(kind=0, suba=2, subb=3),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="[]")}
    ),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="StringJ")}
    ),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Char")}
    ),
    @frege.runtime.Meta.Tau(kind=0, suba=6, subb=7),
    @frege.runtime.Meta.Tau(kind=0, suba=5, subb=8),
    @frege.runtime.Meta.Tau(
      kind=2, suba=0,
      tcon={@frege.runtime.Meta.QName(kind=0, pack="frege.prelude.PreludeBase", base="Int")}
    ),
    @frege.runtime.Meta.Tau(kind=0, suba=5, subb=10)
  },
  rhos={
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=4),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=9), @frege.runtime.Meta.Rho(sigma=1, rhotau=0),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=10),
    @frege.runtime.Meta.Rho(rhofun=false, rhotau=11),
    @frege.runtime.Meta.Rho(sigma=4, rhotau=3), @frege.runtime.Meta.Rho(sigma=3, rhotau=5)
  },
  sigmas={
    @frege.runtime.Meta.Sigma(rho=0), @frege.runtime.Meta.Sigma(rho=1),
    @frege.runtime.Meta.Sigma(rho=2), @frege.runtime.Meta.Sigma(rho=3),
    @frege.runtime.Meta.Sigma(rho=4), @frege.runtime.Meta.Sigma(rho=6)
  },
  exprs={@frege.runtime.Meta.Expr()}, kinds={@frege.runtime.Meta.Kind(kind=0)}
)

final public class FregeProducer  {
  

final public static Ĳ ĳ = new Ĳ();
// Bind {IO (), Lambda, Prelude.println(PreludeText.IShow_String.it, "Hi from Frege!")}
// function `testio`  s  {RValue, RSimple, RSafeTC}
// IO ()
// println "Hi from Frege!"
final public static frege.runtime.Lambda testio = 
  Prelude.println(PreludeText.IShow_String.it, "Hi from Frege!")
;
// function `getElem`  s(ss)  {RValue, RTailRec, RSimple, RSafeTC}
// Int -> [Int] -> Int
// λ_a -> λ_b -> case (_a, _b) of {(!dwim19774,x:xs)->case Eq_Int.== 0 0 of {true->x}; ...}
final public static int getElem(int arg$1, PreludeBase.TList arg$2) {
  tailrecursion: while (true) {
    final int arg$1f = arg$1;
    final PreludeBase.TList arg$2f = arg$2;
    // bind strict var _a{19719}  to  Bind {Int, int, arg$1f}
    // too cheap to realize _a_19719 bound to Bind {Int, int, arg$1f}
    // bind strict var _b{19714}  to  Bind {[Int], PreludeBase.TList, arg$2f}
    // too cheap to realize _b_19714 bound to Bind {[Int], PreludeBase.TList, arg$2f}
    // case  (_a{19719}, _b{19714})  ... 
    // ... of  (!dwim19774{19774},x{19713}:xs{19716}) -> case Eq_Int.== 0 0 of {true->x}
    // match  x{19713}:xs{19716}  with  Bind {[Int], PreludeBase.TList, arg$2f}
    // too cheap to realize $ bound to Bind {[Int], PreludeBase.TList, arg$2f}
    // realize $ bound to Bind {[Int], PreludeBase.TList.DCons, arg$2f._Cons()}
    final PreludeBase.TList.DCons $19965 = arg$2f._Cons();
    if ($19965 != null) {
      // bind lazy var xs{19716}  to  Bind {[Int], Lazy<PreludeBase.TList>, $19965.mem2}
      // bind strict var x{19713}  to  Bind {Int, java.lang.Integer, x_19713}
      // realize x_19713 bound to Bind {Int, java.lang.Integer, frege.runtime.Delayed.<java.lang.Integer>forced($19965.mem1)}
      final java.lang.Integer x_19713 = 
        frege.runtime.Delayed.<java.lang.Integer>forced($19965.mem1)
      ;
      // bind strict var dwim19774{19774}  to  Bind {Int, int, arg$1f}
      // too cheap to realize dwim19774_19774 bound to Bind {Int, int, arg$1f}
      // case  Eq_Int.== 0 dwim19774{19774}  ... (guard)
      // ... of  true -> x
      // match  true  with  Bind {Bool, boolean, 0 == arg$1f}
      if (0 == arg$1f) {
        // return int  x
        // Bind {Int, int, (int)x_19713}
        return (int)x_19713;
      }
    }
    // ... of  (n{19715},x{19726}:xs{19725}) -> getElem (- n 1) xs
    // match  x{19726}:xs{19725}  with  Bind {[Int], PreludeBase.TList, arg$2f}
    // too cheap to realize $ bound to Bind {[Int], PreludeBase.TList, arg$2f}
    // realize $ bound to Bind {[Int], PreludeBase.TList.DCons, arg$2f._Cons()}
    final PreludeBase.TList.DCons $19967 = arg$2f._Cons();
    if ($19967 != null) {
      // bind strict var xs{19725}  to  Bind {[Int], PreludeBase.TList, xs_19725}
      // realize xs_19725 bound to Bind {[Int], PreludeBase.TList, $19967.mem2.<PreludeBase.TList>forced()}
      final PreludeBase.TList xs_19725 = $19967.mem2.<PreludeBase.TList>forced();
      // bind lazy var x{19726}  to  Bind {Int, Lazy<Something>, $19967.mem1}
      // bind strict var n{19715}  to  Bind {Int, int, arg$1f}
      // too cheap to realize n_19715 bound to Bind {Int, int, arg$1f}
      // tailcall  getElem (- n 1) xs
      arg$1 = arg$1f - 1;
      arg$2 = xs_19725;
      continue tailrecursion;
    }
    // ... of  (_{19728},[]) -> negate 1
    // match  []  with  Bind {[Int], PreludeBase.TList, arg$2f}
    // too cheap to realize $ bound to Bind {[Int], PreludeBase.TList, arg$2f}
    // realize $ bound to Bind {[Int], PreludeBase.TList.DList, arg$2f._List()}
    final PreludeBase.TList.DList $19961 = arg$2f._List();
    assert $19961 != null;
    // return int  negate 1
    // Bind {Int, int, - 1}
    return - 1;
  }
}
// no binding
// function `evens`  u  {RAlways, RSafeTC}
// [Int]
// let lc$21845=λ_us21845 -> case _us21845 of {x:_xs21848->if even x then !: x (lc$21845 _xs21848) else lc$21845 _xs21848; ...} in ...
final public static frege.runtime.Lazy evens = 
  new frege.runtime.Delayed() {
    final public frege.runtime.Lazy eval() {
      // let lc$21845=λ_us21845 -> case _us21845 of {x:_xs21848->if even x then !: x (lc$21845 _xs21848) else lc$21845 _xs21848; ...} in ...
      // function `lc$21845{19739}`  u  {RValue, RTailRec, RSimple, RSafeTC}
      // [Int] -> [Int]
      // λ_us21845 -> case _us21845 of {x:_xs21848->if even x then !: x (lc$21845 _xs21848) else lc$21845 _xs21848; ...}
      final class Flc$21845_19739 extends frege.runtime.Fun1<PreludeBase.TList>  {
        final public PreludeBase.TList work(frege.runtime.Lazy arg$1) {
          final Flc$21845_19739 this19739 = this;
          tailrecursion: while (true) {
            final frege.runtime.Lazy arg$1f = arg$1;
            // bind lazy var _us21845{19718}  to  Bind {[Int], Lazy<PreludeBase.TList>, arg$1f}
            // case  _us21845{19718}  ... 
            // ... of  x{19717}:_xs21848{19720} -> if even x then !: x (lc$21845 _xs21848) else lc$21845 _xs21848
            // realize $ bound to Bind {[Int], PreludeBase.TList, arg$1f.<PreludeBase.TList>forced()}
            final PreludeBase.TList $19964 = arg$1f.<PreludeBase.TList>forced();
            // match  x{19717}:_xs21848{19720}  with  Bind {[Int], PreludeBase.TList, $19964}
            // too cheap to realize $ bound to Bind {[Int], PreludeBase.TList, $19964}
            // realize $ bound to Bind {[Int], PreludeBase.TList.DCons, $19964._Cons()}
            final PreludeBase.TList.DCons $19963 = $19964._Cons();
            if ($19963 != null) {
              // bind lazy var _xs21848{19720}  to  Bind {[Int], Lazy<PreludeBase.TList>, $19963.mem2}
              // bind lazy var x{19717}  to  Bind {Int, Lazy<Something>, $19963.mem1}
              // if even x then !: x (lc$21845 _xs21848) else lc$21845 _xs21848
              if (
                PreludeBase.IIntegral_Int.even(
                      frege.runtime.Delayed.<java.lang.Integer>forced($19963.mem1)
                    )
              ) {
                // return PreludeBase.TList  !: x (lc$21845 _xs21848)
                // Bind {[Int], PreludeBase.TList, PreludeBase._excl_colon(frege.runtime.Delayed.<java.lang.Object>forced($19963.mem1), this19739.apply($19963.mem2))}
                return PreludeBase._excl_colon(
                          frege.runtime.Delayed.<java.lang.Object>forced($19963.mem1),
                          this19739.apply($19963.mem2)
                        );
              }
              else {
                // tailcall  lc$21845 _xs21848
                arg$1 = $19963.mem2;
                continue tailrecursion;
              }
            }
            // ... of  [] -> []
            // too cheap to realize $ bound to Bind {[Int], PreludeBase.TList, $19964}
            // match  []  with  Bind {[Int], PreludeBase.TList, $19964}
            // too cheap to realize $ bound to Bind {[Int], PreludeBase.TList, $19964}
            // realize $ bound to Bind {[Int], PreludeBase.TList.DList, $19964._List()}
            final PreludeBase.TList.DList $19942 = $19964._List();
            assert $19942 != null;
            // return PreludeBase.TList  []
            // Bind {[Int], PreludeBase.TList, PreludeBase.TList.DList.it}
            return PreludeBase.TList.DList.it;
          }
        }
        final public PreludeBase.TList eval(final java.lang.Object arg$1) {
          return work(frege.runtime.Delayed.delayed(arg$1));
        }
      }
      final Flc$21845_19739 lc$21845_19739 = new Flc$21845_19739();
      // return PreludeBase.TList  lc$21845 (toList (enumFromTo 1 10))
      // Bind {[Int], PreludeBase.TList, complicated java expression}
      return lc$21845_19739.work(
                new frege.runtime.Delayed() {
                  final public frege.runtime.Lazy eval() {
                    return PreludeList.IListSource__lbrack_rbrack.toList(
                              PreludeBase.IEnum_Int.enumFromTo(1, 10)
                            );
                  }
                }
              );
    }
  }
;
// function `main`  s(u)  {RValue, RSimple, RSafeTC}
// [String] -> IO ()
// λ_ -> $ println (show evens)
final public static frege.runtime.Lambda _main(final frege.runtime.Lazy arg$1) {
  // return Lambda  $ println (show evens)
  // Bind {IO (), Lambda, complicated java expression}
  return frege.runtime.Delayed.<frege.runtime.Lambda>forced(
            PreludeBase.$(
                  Ĳ.printlnƒcfbbb639.inst(PreludeText.IShow_String.it),
                  PreludeText.Ĳ.showƒe38a49fd.inst(PreludeText.IShow_Int.it).apply(
                        FregeProducer.evens
                      )
                )
          );
}
// Bind {Int, int, complicated java expression}
// function `evens1`  s  {RValue, RSimple, RSafeTC}
// Int
// head evens
final public static int evens1 = 
  (int)(java.lang.Integer)PreludeList.IListView__lbrack_rbrack.head(
        FregeProducer.evens.<PreludeBase.TList>forced()
      )
;
@frege.runtime.Meta.FunctionPointers(
  qnames={
    @frege.runtime.Meta.QName(base="println"),
    @frege.runtime.Meta.QName(pack="fregepkg.FregeProducer", base="main")
  },
  jnames={"printlnƒcfbbb639", "_mainƒe7f47f09"}
)
public static class Ĳ  {
  public Ĳ() {}
  final public static class printlnƒcfbbb639 extends frege.runtime.Fun1<frege.runtime.Lambda>  {
    final PreludeText.CShow ctx$1 ;
    public printlnƒcfbbb639(final PreludeText.CShow arg$1) {
      ctx$1 = arg$1;
    }
    final public frege.runtime.Lambda eval(final java.lang.Object arg$1) {
      return Prelude.println(ctx$1, frege.runtime.Delayed.<java.lang.Object>forced(arg$1));
    }
    final public static printlnƒcfbbb639 inst(final PreludeText.CShow arg$1) {
      return new printlnƒcfbbb639(arg$1);
    }
  }
  final public static class _mainƒe7f47f09 extends frege.runtime.Fun1<frege.runtime.Lambda>  {
    public _mainƒe7f47f09() {}
    final public frege.runtime.Lambda eval(final java.lang.Object arg$1) {
      return FregeProducer._main(frege.runtime.Delayed.delayed(arg$1));
    }
    final public static _mainƒe7f47f09 inst = new _mainƒe7f47f09();
  }
}
public static void main(final java.lang.String[] argv) {
  final long t1 = java.lang.System.nanoTime();
  java.lang.Integer xit = frege.runtime.Runtime.runMain(
    frege.prelude.PreludeBase.TST.performUnsafe(
      Ĳ._mainƒe7f47f09.inst.apply(frege.prelude.PreludeBase._toList(argv)).<frege.runtime.Lambda>forced()));
  final long t2 = java.lang.System.nanoTime();
  frege.runtime.Runtime.stderr.get().println(
    "runtime " + ((((t2 - t1) + 500000) / 1000000) / 1e3) + " wallclock seconds.");
  if (xit != null) java.lang.System.exit(xit);
}
}
